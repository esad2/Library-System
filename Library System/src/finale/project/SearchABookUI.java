/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package finale.project;

import java.io.*;
import java.util.*;
import java.text.SimpleDateFormat;

/**
 *
 *
 *
 *
 * @author salih
 */
public class SearchABookUI extends javax.swing.JFrame {

    /**
     * Creates new form SearchABookUI
     */
    public SearchABookUI() {
        initComponents();
        checkLateBooks();
        avaliabilityTextField.setEditable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        searchABookTitleLabel = new javax.swing.JLabel();
        avaliabilityLabel = new javax.swing.JLabel();
        bookNameLabel = new javax.swing.JLabel();
        bookNameTextField = new javax.swing.JTextField();
        avaliabilityTextField = new javax.swing.JTextField();
        rentButton = new javax.swing.JButton();
        previousPageButton = new javax.swing.JButton();
        checkAvaliabilityButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        searchABookTitleLabel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        searchABookTitleLabel.setText("Search A Book");

        avaliabilityLabel.setText("Avaliabilty");

        bookNameLabel.setText("Book Name");

        rentButton.setText("Rent");
        rentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rentButtonActionPerformed(evt);
            }
        });

        previousPageButton.setText("Back to Previous Page");
        previousPageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousPageButtonActionPerformed(evt);
            }
        });

        checkAvaliabilityButton.setText("Check Avaliability");
        checkAvaliabilityButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkAvaliabilityButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(150, 150, 150)
                                .addComponent(searchABookTitleLabel))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(74, 74, 74)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(bookNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(checkAvaliabilityButton)
                                    .addComponent(bookNameLabel))
                                .addGap(96, 96, 96)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(rentButton)
                                    .addComponent(avaliabilityLabel)
                                    .addComponent(avaliabilityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 18, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(previousPageButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(searchABookTitleLabel)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(avaliabilityLabel)
                    .addComponent(bookNameLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bookNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(avaliabilityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rentButton)
                    .addComponent(checkAvaliabilityButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 84, Short.MAX_VALUE)
                .addComponent(previousPageButton)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void rentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rentButtonActionPerformed

        String bookName = bookNameTextField.getText();
        if (checkBookAvailability(bookName)) {
            removeBookFromList(bookName);
            addBookToUnavailableList(bookName);
            addBookToRentedList(bookName);
            avaliabilityTextField.setText("Rented");
        } else {
            avaliabilityTextField.setText("Not Available");
        }    }//GEN-LAST:event_rentButtonActionPerformed

    private void previousPageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousPageButtonActionPerformed
        CustomerUI jf1 = new CustomerUI();

        jf1.show();
        dispose();     }//GEN-LAST:event_previousPageButtonActionPerformed

    private void checkAvaliabilityButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkAvaliabilityButtonActionPerformed

        String bookName = bookNameTextField.getText();
        boolean isAvailable = checkBookAvailability(bookName);
        avaliabilityTextField.setText(isAvailable ? "Available" : "Not Available");
    }

    private boolean checkBookAvailability(String bookName) {
        try (BufferedReader br = new BufferedReader(new FileReader("BookListAvaliable.txt"))) {
            String line;
            while ((line = br.readLine()) != null) {
                if (line.trim().equalsIgnoreCase(bookName.trim())) {
                    return true;
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return false;
     }//GEN-LAST:event_checkAvaliabilityButtonActionPerformed

    private void removeBookFromList(String bookName) {
        File inputFile = new File("BookListAvaliable.txt");
        File tempFile = new File("BookList_temp.txt");

        try (BufferedReader reader = new BufferedReader(new FileReader(inputFile)); BufferedWriter writer = new BufferedWriter(new FileWriter(tempFile))) {

            String line;
            while ((line = reader.readLine()) != null) {
                if (!line.trim().equalsIgnoreCase(bookName.trim())) {
                    writer.write(line + System.getProperty("line.separator"));
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        if (!inputFile.delete()) {
            System.out.println("Could not delete file");
            return;
        }
        if (!tempFile.renameTo(inputFile)) {
            System.out.println("Could not rename file");
        }
    }

    private void addBookToUnavailableList(String bookName) {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter("BookListUnavailable.txt", true))) {
            writer.write(bookName + System.getProperty("line.separator"));
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void addBookToRentedList(String bookName) {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter("RentedBooks.txt", true))) {
            String currentDate = new SimpleDateFormat("yyyy-MM-dd").format(new Date());
            writer.write(bookName + "," + currentDate + System.getProperty("line.separator"));
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void checkLateBooks() {
        try (BufferedReader reader = new BufferedReader(new FileReader("RentedBooks.txt"))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] parts = line.split(",");
                String bookName = parts[0];
                String rentDateStr = parts[1];
                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                Date rentDate = sdf.parse(rentDateStr);
                Date currentDate = new Date();
                long diffInMillies = Math.abs(currentDate.getTime() - rentDate.getTime());
                long diff = diffInMillies / (1000 * 60 * 60 * 24);
                if (diff > 20) {
                    addBookToLateList(bookName);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void addBookToLateList(String bookName) {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter("LateBooks.txt", true))) {
            writer.write(bookName + System.getProperty("line.separator"));
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SearchABookUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SearchABookUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SearchABookUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SearchABookUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SearchABookUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    javax.swing.JLabel avaliabilityLabel;
    javax.swing.JTextField avaliabilityTextField;
    javax.swing.JLabel bookNameLabel;
    javax.swing.JTextField bookNameTextField;
    javax.swing.JButton checkAvaliabilityButton;
    javax.swing.JButton previousPageButton;
    javax.swing.JButton rentButton;
    javax.swing.JLabel searchABookTitleLabel;
    // End of variables declaration//GEN-END:variables
}
