/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package finale.project;

import java.io.*;
import java.util.Random;
import javax.swing.JOptionPane;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author salih
 */
public class PeopleAndBooks extends javax.swing.JFrame {

    /**
     * Creates new form AddPersonOrBookUI
     */
    public PeopleAndBooks() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        insertNameLabel = new javax.swing.JLabel();
        nameTextField = new javax.swing.JTextField();
        bookListButton = new javax.swing.JButton();
        customerListButton = new javax.swing.JButton();
        TitleLabel = new javax.swing.JLabel();
        previousPageButton = new javax.swing.JButton();
        removeBookButton = new javax.swing.JButton();
        removeCustomerButton = new javax.swing.JButton();
        addToLateBooksListButton = new javax.swing.JButton();
        addToUnavaliableBooksListButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        insertNameLabel.setText("Insert Book/Person Name");

        bookListButton.setBackground(new java.awt.Color(51, 255, 51));
        bookListButton.setText("Add To Avaliable Book List");
        bookListButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookListButtonActionPerformed(evt);
            }
        });

        customerListButton.setBackground(new java.awt.Color(51, 255, 51));
        customerListButton.setText("Add to Customer List");
        customerListButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerListButtonActionPerformed(evt);
            }
        });

        TitleLabel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        TitleLabel.setText("Add/Remove A New Person/Book ");

        previousPageButton.setText("Back To Previous Page");
        previousPageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousPageButtonActionPerformed(evt);
            }
        });

        removeBookButton.setBackground(new java.awt.Color(255, 0, 0));
        removeBookButton.setText("Remove From Book List");
        removeBookButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeBookButtonActionPerformed(evt);
            }
        });

        removeCustomerButton.setBackground(new java.awt.Color(255, 0, 0));
        removeCustomerButton.setText("Remove From Customer list");
        removeCustomerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeCustomerButtonActionPerformed(evt);
            }
        });

        addToLateBooksListButton.setBackground(new java.awt.Color(51, 255, 51));
        addToLateBooksListButton.setText("Add to Late Books List");
        addToLateBooksListButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToLateBooksListButtonActionPerformed(evt);
            }
        });

        addToUnavaliableBooksListButton.setBackground(new java.awt.Color(51, 255, 51));
        addToUnavaliableBooksListButton.setText("Add To Unavaliable Book List");
        addToUnavaliableBooksListButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToUnavaliableBooksListButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(removeBookButton, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                        187, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED,
                                                        javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(previousPageButton))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout
                                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING,
                                                                false)
                                                        .addComponent(insertNameLabel)
                                                        .addComponent(nameTextField,
                                                                javax.swing.GroupLayout.PREFERRED_SIZE, 207,
                                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(TitleLabel)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addComponent(bookListButton,
                                                                        javax.swing.GroupLayout.DEFAULT_SIZE, 187,
                                                                        Short.MAX_VALUE)
                                                                .addGap(26, 26, 26)
                                                                .addComponent(customerListButton))
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addComponent(addToLateBooksListButton,
                                                                        javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                        javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                        Short.MAX_VALUE)
                                                                .addGap(172, 172, 172)))
                                                .addGap(0, 0, Short.MAX_VALUE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(addToUnavaliableBooksListButton)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26,
                                                        Short.MAX_VALUE)
                                                .addComponent(removeCustomerButton)))
                                .addContainerGap()));
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(TitleLabel)
                                .addGap(32, 32, 32)
                                .addComponent(insertNameLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(nameTextField, javax.swing.GroupLayout.PREFERRED_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(bookListButton)
                                        .addComponent(customerListButton))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(addToUnavaliableBooksListButton)
                                        .addComponent(removeCustomerButton))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(addToLateBooksListButton)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED,
                                                        javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(previousPageButton)
                                                .addContainerGap())
                                        .addGroup(layout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(removeBookButton)
                                                .addContainerGap(27, Short.MAX_VALUE)))));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addToLateBooksListButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_addToLateBooksListButtonActionPerformed
        String name = nameTextField.getText();
        if (name.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Name field cannot be empty.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        try (BufferedWriter writer = new BufferedWriter(new FileWriter("LateBooks.txt", true))) {
            writer.write(name);
            writer.newLine();
            JOptionPane.showMessageDialog(this, "Book added to late books list successfully!");
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "An error occurred while adding the book to late books list.", "Error",
                    JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }// GEN-LAST:event_addToLateBooksListButtonActionPerformed

    private void addToUnavaliableBooksListButtonActionPerformed(java.awt.event.ActionEvent evt) {
        String name = nameTextField.getText();
        if (name.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Name field cannot be empty.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        File file = new File("BookListUnavaliable.txt");
        System.out.println("Looking for file at: " + file.getAbsolutePath()); // Debugging line
        if (!file.exists()) {
            JOptionPane.showMessageDialog(this, "File BookListUnavaliable.txt does not exist.", "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(file, true))) {
            writer.write(name);
            writer.newLine();
            JOptionPane.showMessageDialog(this, "Book added to the unavaliable list successfully!");
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "An error occurred while adding the book.", "Error",
                    JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }// GEN-LAST:event_addToUnavaliableBooksListButtonActionPerformed

    private void bookListButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_bookListButtonActionPerformed
        String name = nameTextField.getText();
        if (name.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Name field cannot be empty.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        File file = new File("BookListAvaliable.txt");
        if (!file.exists()) {
            JOptionPane.showMessageDialog(this, "File BookListAvaliable.txt does not exist.", "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(file, true))) {
            writer.write(name);
            writer.newLine();
            JOptionPane.showMessageDialog(this, "Book added successfully!");
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "An error occurred while adding the book.", "Error",
                    JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }// GEN-LAST:event_bookListButtonActionPerformed

    private void customerListButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_customerListButtonActionPerformed
        String name = nameTextField.getText();
        if (name.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Name field cannot be empty.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        Random random = new Random();
        int id = random.nextInt(90000) + 10000; // Generate a 5 digit number
        try (BufferedWriter writer = new BufferedWriter(new FileWriter("CustomerList.txt", true))) {
            writer.write(String.valueOf(id));
            writer.newLine();
            writer.write(name);
            writer.newLine();
            JOptionPane.showMessageDialog(this, "Customer added successfully!");
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "An error occurred while adding the customer.", "Error",
                    JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }// GEN-LAST:event_customerListButtonActionPerformed

    private void previousPageButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_previousPageButtonActionPerformed
        LibrarianUI jf1 = new LibrarianUI();

        jf1.show();
        dispose();
    }// GEN-LAST:event_previousPageButtonActionPerformed

    private void removeBookButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_removeBookButtonActionPerformed
        String name = nameTextField.getText();

        if (name.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Name field cannot be empty.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            File inputFile = new File("BookListAvaliable.txt");
            File tempFile = new File("BookListAvaliable_temp.txt");

            BufferedReader reader = new BufferedReader(new FileReader(inputFile));
            BufferedWriter writer = new BufferedWriter(new FileWriter(tempFile));

            String currentLine;
            while ((currentLine = reader.readLine()) != null) {
                if (!currentLine.trim().equals(name)) {
                    writer.write(currentLine);
                    writer.newLine();
                }
            }
            writer.close();
            reader.close();
            if (!inputFile.delete()) {
                JOptionPane.showMessageDialog(this, "Could not delete original file", "Error",
                        JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (!tempFile.renameTo(inputFile)) {
                JOptionPane.showMessageDialog(this, "Could not rename temp file", "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "Book removed successfully!");
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "An error occurred while removing the book.", "Error",
                    JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }// GEN-LAST:event_removeBookButtonActionPerformed

    private void removeCustomerButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_removeCustomerButtonActionPerformed
        String name = nameTextField.getText();
        if (name.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Name field cannot be empty.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            File inputFile = new File("CustomerList.txt");
            File tempFile = new File("CustomerList_temp.txt");

            BufferedReader reader = new BufferedReader(new FileReader(inputFile));
            BufferedWriter writer = new BufferedWriter(new FileWriter(tempFile));

            String currentLine;
            boolean found = false;
            while ((currentLine = reader.readLine()) != null) {
                if (found) {
                    found = false;
                    continue;
                }
                if (currentLine.trim().equals(name)) {
                    found = true;
                    continue;
                }
                writer.write(currentLine);
                writer.newLine();
            }
            writer.close();
            reader.close();
            if (!inputFile.delete()) {
                JOptionPane.showMessageDialog(this, "Could not delete original file", "Error",
                        JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (!tempFile.renameTo(inputFile)) {
                JOptionPane.showMessageDialog(this, "Could not rename temp file", "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "Customer removed successfully!");
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "An error occurred while removing the customer.", "Error",
                    JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }// GEN-LAST:event_removeCustomerButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        // <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
        // (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the default
         * look and feel.
         * For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PeopleAndBooks.class.getName())
                    .log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PeopleAndBooks.class.getName())
                    .log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PeopleAndBooks.class.getName())
                    .log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PeopleAndBooks.class.getName())
                    .log(java.util.logging.Level.SEVERE, null, ex);
        }
        // </editor-fold>
        // </editor-fold>
        // </editor-fold>
        // </editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PeopleAndBooks().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    javax.swing.JLabel TitleLabel;
    javax.swing.JButton addToLateBooksListButton;
    javax.swing.JButton addToUnavaliableBooksListButton;
    javax.swing.JButton bookListButton;
    javax.swing.JButton customerListButton;
    javax.swing.JLabel insertNameLabel;
    javax.swing.JTextField nameTextField;
    javax.swing.JButton previousPageButton;
    javax.swing.JButton removeBookButton;
    javax.swing.JButton removeCustomerButton;
    // End of variables declaration//GEN-END:variables
}
